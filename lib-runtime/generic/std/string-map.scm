(define (string-map4/itr! v pos len proc a b c d)
  (unless (= pos len)
    (string-set! v pos
                 (proc (string-ref a pos)
                       (string-ref b pos)
                       (string-ref c pos)
                       (string-ref d pos)))
    (string-map4/itr! v (+ pos 1) len proc a b c d)))

(define (string-map4 proc a b c d)
  (let* ((len (min (string-length a) (string-length b)
                   (string-length c) (string-length d)))
         (v (make-string len)))
    (string-map4/itr! v 0 len proc a b c d)
    v))

(define (string-map3/itr! v pos len proc a b c)
  (unless (= pos len)
    (string-set! v pos
                 (proc (string-ref a pos)
                       (string-ref b pos)
                       (string-ref c pos)))
    (string-map3/itr! v (+ pos 1) len proc a b c)))

(define (string-map3 proc a b c)
  (let* ((len (min (string-length a) (string-length b) (string-length c)))
         (v (make-string len)))
    (string-map3/itr! v 0 len proc a b c)
    v))

(define (string-map2/itr! v pos len proc a b)
  (unless (= pos len)
    (string-set! v pos
                 (proc (string-ref a pos)
                       (string-ref b pos)))
    (string-map2/itr! v (+ pos 1) len proc a b)))

(define (string-map2 proc a b)
  (let* ((len (min (string-length a) (string-length b)))
         (v (make-string len)))
    (string-map2/itr! v 0 len proc a b)
    v))

(define (string-map1/itr! v pos len proc a)
  (unless (= pos len)
    (string-set! v pos
                 (proc (string-ref a pos)))
    (string-map1/itr! v (+ pos 1) len proc a)))

(define (string-map1 proc a)
  (let* ((len (string-length a))
         (v (make-string len)))
    (string-map1/itr! v 0 len proc a)
    v))

(define (string-map proc a . args)
  (if (null? args)
    (string-map1 proc a)
    (let ((b (car args))
          (bb (cdr args)))
      (if (null? bb)
        (string-map2 proc a b)
        (let ((c (car bb))
              (cc (cdr bb)))
          (if (null? cc)
            (string-map3 proc a b c)
            (let ((d (car cc))
                  (dd (cdr cc)))
              (if (null? dd)
                (string-map4 proc a b c d)
                (error "Too many...")))))))))
